{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","urlError","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","urlPattern","NewMovie","onAdd","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","imgUrlError","setImgUrlError","imdbUrlError","setImdbUrlError","count","setCount","isValidUrl","url","test","hasOnlySpaces","string","trim","checkForm","Boolean","onSubmit","preventDefault","x","disabled","App","moviesFromServer","newMovies","setNewMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a2dbadc.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  urlError?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  urlError,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {urlError && (\n        <p className=\"help is-danger\">Enter the valid URL</p>\n      )}\n    </div>\n  );\n};\n","import './NewMovie.scss';\nimport { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\n/* eslint-disable */\nconst urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n/* eslint-enable */\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [imgUrlError, setImgUrlError] = useState(false);\n  const [imdbUrlError, setImdbUrlError] = useState(false);\n  const [count, setCount] = useState(0);\n\n  const isValidUrl = (url: string): boolean => urlPattern.test(url);\n  const hasOnlySpaces = (string: string): boolean => /^\\s*$/.test(string);\n\n  const movie = {\n    title: title.trim(),\n    description: description.trim(),\n    imgUrl: imgUrl.trim(),\n    imdbUrl: imdbUrl.trim(),\n    imdbId: imdbId.trim(),\n  };\n\n  const checkForm = Boolean(\n    !hasOnlySpaces(title)\n    && !hasOnlySpaces(imgUrl)\n    && !hasOnlySpaces(imdbUrl)\n    && !hasOnlySpaces(imdbId),\n  );\n\n  const handleSumbit\n    = (event: React.FormEvent) => {\n      event.preventDefault();\n\n      if (!isValidUrl(movie.imgUrl)) {\n        setImgUrlError(true);\n      } else if (!isValidUrl(movie.imdbUrl)) {\n        setImdbUrlError(true);\n      } else {\n        setImgUrlError(false);\n        setImdbUrlError(false);\n        onAdd(movie);\n\n        setCount(x => (x + 1));\n\n        setTitle('');\n        setDescription('');\n        setImgUrl('');\n        setImdbUrl('');\n        setImdbId('');\n      }\n    };\n\n  return (\n    <form\n      onSubmit={handleSumbit}\n      className=\"NewMovie\"\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        urlError={imgUrlError}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        urlError={imdbUrlError}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!checkForm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMovies, setNewMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setNewMovies(currentMovies => ([...currentMovies, movie]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}